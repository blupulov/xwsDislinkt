// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: services/following-service/following-service.proto

package following_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowingServiceClient is the client API for FollowingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowingServiceClient interface {
	GetAllUserFollowers(ctx context.Context, in *GetAllUserFollowersRequest, opts ...grpc.CallOption) (*GetAllUserFollowersResponse, error)
	GetAllFollowingUsers(ctx context.Context, in *GetAllFollowingUsersRequest, opts ...grpc.CallOption) (*GetAllFollowingUsersResponse, error)
}

type followingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowingServiceClient(cc grpc.ClientConnInterface) FollowingServiceClient {
	return &followingServiceClient{cc}
}

func (c *followingServiceClient) GetAllUserFollowers(ctx context.Context, in *GetAllUserFollowersRequest, opts ...grpc.CallOption) (*GetAllUserFollowersResponse, error) {
	out := new(GetAllUserFollowersResponse)
	err := c.cc.Invoke(ctx, "/followingservice.FollowingService/GetAllUserFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) GetAllFollowingUsers(ctx context.Context, in *GetAllFollowingUsersRequest, opts ...grpc.CallOption) (*GetAllFollowingUsersResponse, error) {
	out := new(GetAllFollowingUsersResponse)
	err := c.cc.Invoke(ctx, "/followingservice.FollowingService/GetAllFollowingUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowingServiceServer is the server API for FollowingService service.
// All implementations must embed UnimplementedFollowingServiceServer
// for forward compatibility
type FollowingServiceServer interface {
	GetAllUserFollowers(context.Context, *GetAllUserFollowersRequest) (*GetAllUserFollowersResponse, error)
	GetAllFollowingUsers(context.Context, *GetAllFollowingUsersRequest) (*GetAllFollowingUsersResponse, error)
	mustEmbedUnimplementedFollowingServiceServer()
}

// UnimplementedFollowingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowingServiceServer struct {
}

func (UnimplementedFollowingServiceServer) GetAllUserFollowers(context.Context, *GetAllUserFollowersRequest) (*GetAllUserFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserFollowers not implemented")
}
func (UnimplementedFollowingServiceServer) GetAllFollowingUsers(context.Context, *GetAllFollowingUsersRequest) (*GetAllFollowingUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFollowingUsers not implemented")
}
func (UnimplementedFollowingServiceServer) mustEmbedUnimplementedFollowingServiceServer() {}

// UnsafeFollowingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowingServiceServer will
// result in compilation errors.
type UnsafeFollowingServiceServer interface {
	mustEmbedUnimplementedFollowingServiceServer()
}

func RegisterFollowingServiceServer(s grpc.ServiceRegistrar, srv FollowingServiceServer) {
	s.RegisterService(&FollowingService_ServiceDesc, srv)
}

func _FollowingService_GetAllUserFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).GetAllUserFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/followingservice.FollowingService/GetAllUserFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).GetAllUserFollowers(ctx, req.(*GetAllUserFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_GetAllFollowingUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFollowingUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).GetAllFollowingUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/followingservice.FollowingService/GetAllFollowingUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).GetAllFollowingUsers(ctx, req.(*GetAllFollowingUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowingService_ServiceDesc is the grpc.ServiceDesc for FollowingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "followingservice.FollowingService",
	HandlerType: (*FollowingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllUserFollowers",
			Handler:    _FollowingService_GetAllUserFollowers_Handler,
		},
		{
			MethodName: "GetAllFollowingUsers",
			Handler:    _FollowingService_GetAllFollowingUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/following-service/following-service.proto",
}
